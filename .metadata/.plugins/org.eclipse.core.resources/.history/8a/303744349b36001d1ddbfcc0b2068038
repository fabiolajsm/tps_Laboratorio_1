#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXIMO_DE_JUGADORES 22
#define MAXIMO_ARQUEROS 2
#define MAXIMO_DEFENSORES 8
#define MAXIMO_MEDIOCAMPISTAS 8
#define MAXIMO_DELANTEROS 4

int numerosCargados[MAXIMO_DE_JUGADORES] = { };
int arqueros = 0;
int defensores = 0;
int mediocampistas = 0;
int delanteros = 0;

static int esNumero(char cadena[]) {
	int i = 0;
	int retorno = 1;
	if (cadena != NULL && strlen(cadena) > 0) {
		while (cadena[i] != '\0') {
			if (cadena[i] < '0' || cadena[i] > '9') {
				retorno = 0;
				break;
			}
			i++;
		}
	}
	return retorno;
}

static int obtenerInt(int *pResultado) {
	int ret = -1;
	char buffer[1024];

	fgets(buffer, sizeof(buffer), stdin);
	buffer[strlen(buffer) - 1] = '\0';

	if (esNumero(buffer) == 1) {
		*pResultado = atoi(buffer);
		ret = 0;
	}
	return ret;
}

int obtenerNumero(int *pResultado, char *mensaje, char *mensajeError,
		int minimo, int maximo, int intentos, int validarDisponible) {
	int ret = -1;
	int num;

	if (pResultado != NULL && mensaje != NULL && mensajeError != NULL) {
		while (intentos > 0) {
			printf("%s", mensaje);
			if (obtenerInt(&num) == 0) {
				if (num <= maximo && num >= minimo) {
					*pResultado = num;
					ret = 0;
					break;
				}
			}
			intentos--;
			printf("%s", mensajeError);
		}
	}
	return ret;
}

int camisetaDisponible(int num, char *mensajeExito, char *mensajeError) {
	int ret = 0;
	if (mensajeExito != NULL && mensajeError != NULL && num > 0) {
		for (int i = 0; i < MAXIMO_DE_JUGADORES; i++) {
			if (numerosCargados[num - 1] != num) {
				ret = 1;
				numerosCargados[num - 1] = num;
				printf("%s", mensajeExito);
				break;
			} else {
				printf("%s", mensajeError);
				break;
			}
		}
	}
	return ret;
}

int posicionDisponible(int num, char *mensajeExito, char *mensajeError) {
	int ret = 0;
	if (mensajeExito != NULL && mensajeError != NULL && num > 0) {
		switch (num) {
		case 1:
			if (arqueros < MAXIMO_ARQUEROS) {
				ret = 1;
				arqueros++;
			}
			break;
		case 2:
			if (defensores < MAXIMO_DEFENSORES) {
				ret = 1;
				defensores++;
			}
			break;
		case 3:
			if (mediocampistas < MAXIMO_MEDIOCAMPISTAS) {
				ret = 1;
				mediocampistas++;
			}
			break;
		case 4:
			if (delanteros < MAXIMO_DELANTEROS) {
				ret = 1;
				delanteros++;
			}
			break;
		}
	}

	if (ret == 1) {
		printf("%s", mensajeExito);
	} else {
		printf("%s", mensajeError);
	}
	return ret;
}

float divisionDecimales(float numA, float numB) {
	if (numB == 0) {
		return -1;
	}
	return numA / numB;
}

int esOpcionDisponible(int totalCostos, int jugadoresIngresados) {
	int ret = 0;
	if (totalCostos < 1 && jugadoresIngresados < 1) {
		printf(
				"Error. No hay costos de mantenimiento ni jugadores ingresados. Intente yendo a la opción 1 y a la 2.\n");
	} else if (totalCostos < 1) {
		printf(
				"Error. No hay costos de mantenimiento ingresados. Intente yendo a la opción 1.\n");
	} else if (jugadoresIngresados < 1) {
		printf(
				"Error. No hay jugadores ingresados. Intente yendo a la opción 2.\n");
	} else {
		ret = 1;
	}
	return ret;
}

void mostrarCantidadJugadores(void) {
	printf(
			"→ Arqueros: %d\n→ Defensores: %d\n→ Mediocampistas: %d\n→ Delanteros: %d\n",
			arqueros, defensores, mediocampistas, delanteros);
}
